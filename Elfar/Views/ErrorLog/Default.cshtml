@model Elfar.Models.Default
@{
    var errorLog = Model.ErrorLog;
    var id = errorLog.ID;
 }
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
		<title>Error: @errorLog.Type [@id]</title>
        <link rel="stylesheet" type="text/css" href="@Url.Action("Stylesheet")" />
	</head>
	<body>
		<h1>@errorLog.Message</h1>
		<ul id="navigation">
			<li><a href="@Url.Action("Index")" title="List of logged errors">Errors</a></li>
		</ul>
        <p id="title"><span id="error-type">@errorLog.Type</span><span id="separator">: </span><span id="error-message">@errorLog.Message</span></p>
		<pre id="stack-trace">@{ Html.RenderPartial("StackTrace", Model.StackTrace); }</pre>
        @{ var date = errorLog.Time; }
		<p>Logged on @date.ToLongDateString() at @date.ToShortTimeString() (Local)</p>
		<p>See also: (opens in new window)</p>
		<ul>
        @if(!string.IsNullOrWhiteSpace(errorLog.Html))
        {
            <li>The <a href="@Url.Action("Html", new { id })" target="_blank">original ASP.NET error page</a>.</li>
        }
			<li>Raw/Source data in <a href="@Url.Action("Xml", new { id })" rel="alternate" type="application/xml" target="_blank">XML</a> or
            <a href="@Url.Action("Json", new { id })" rel="alternate" type="application/json" target="_blank">JSON</a> format.</li>
		</ul>
        <div>
			<p class="table-caption">Server Variables</p>
			<div class="scroll-view">
				<table cellspacing="0">
                    <thead>
                        <tr>
                            <th style="white-space: nowrap;">Name</th>
                            <th style="white-space: nowrap;">Value</th>
                        </tr>
                    </thead>
                    <tbody>
                    @{
                        var variables = errorLog.ServerVariables;
                        var i = 0;
                     }
                    @foreach(var key in variables.Keys)
                    {
                        <tr class="@(i++ % 2 == 0 ? "even" : "odd")-row">
                            <td class="key-col">@key</td>
                            <td>@variables[key]</td>
                        </tr>
                    }
                    </tbody>
				</table>
			</div>
		</div>
@{ Html.RenderPartial("Footer"); }
	</body>
</html>